// Code generated by protoc-gen-go.
// source: pkg/pb/contacts.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	pkg/pb/contacts.proto

It has these top-level messages:
	Profile
	CreateProfileRequest
	CreateProfileResponse
	ReadProfileRequest
	ReadProfileResponse
	UpdateProfileRequest
	UpdateProfileResponse
	DeleteProfileRequest
	ListProfilesResponse
	Group
	CreateGroupRequest
	CreateGroupResponse
	ReadGroupRequest
	ReadGroupResponse
	UpdateGroupRequest
	UpdateGroupResponse
	DeleteGroupRequest
	ListGroupsResponse
	Contact
	Email
	Address
	CreateContactRequest
	CreateContactResponse
	ReadContactRequest
	ReadContactResponse
	UpdateContactRequest
	UpdateContactResponse
	PatchContactRequest
	PatchContactResponse
	DeleteContactRequest
	ListContactsResponse
	SMSRequest
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import google_protobuf1 "google.golang.org/genproto/protobuf/field_mask"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/lyft/protoc-gen-validate/validate"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
import _ "github.com/infobloxopen/protoc-gen-gorm/options"
import gorm_types "github.com/infobloxopen/protoc-gen-gorm/types"
import atlas_rpc "github.com/infobloxopen/atlas-app-toolkit/rpc/resource"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Profile struct {
	Id       *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name     string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Notes    string                `protobuf:"bytes,3,opt,name=notes" json:"notes,omitempty"`
	Contacts []*Contact            `protobuf:"bytes,4,rep,name=contacts" json:"contacts,omitempty"`
	Groups   []*Group              `protobuf:"bytes,5,rep,name=groups" json:"groups,omitempty"`
}

func (m *Profile) Reset()                    { *m = Profile{} }
func (m *Profile) String() string            { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()               {}
func (*Profile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Profile) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Profile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Profile) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *Profile) GetContacts() []*Contact {
	if m != nil {
		return m.Contacts
	}
	return nil
}

func (m *Profile) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

type CreateProfileRequest struct {
	Payload *Profile `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *CreateProfileRequest) Reset()                    { *m = CreateProfileRequest{} }
func (m *CreateProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateProfileRequest) ProtoMessage()               {}
func (*CreateProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateProfileRequest) GetPayload() *Profile {
	if m != nil {
		return m.Payload
	}
	return nil
}

type CreateProfileResponse struct {
	Result *Profile `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *CreateProfileResponse) Reset()                    { *m = CreateProfileResponse{} }
func (m *CreateProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateProfileResponse) ProtoMessage()               {}
func (*CreateProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateProfileResponse) GetResult() *Profile {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReadProfileRequest struct {
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ReadProfileRequest) Reset()                    { *m = ReadProfileRequest{} }
func (m *ReadProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadProfileRequest) ProtoMessage()               {}
func (*ReadProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReadProfileRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

type ReadProfileResponse struct {
	Result *Profile `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *ReadProfileResponse) Reset()                    { *m = ReadProfileResponse{} }
func (m *ReadProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadProfileResponse) ProtoMessage()               {}
func (*ReadProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ReadProfileResponse) GetResult() *Profile {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpdateProfileRequest struct {
	Payload *Profile `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *UpdateProfileRequest) Reset()                    { *m = UpdateProfileRequest{} }
func (m *UpdateProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateProfileRequest) ProtoMessage()               {}
func (*UpdateProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UpdateProfileRequest) GetPayload() *Profile {
	if m != nil {
		return m.Payload
	}
	return nil
}

type UpdateProfileResponse struct {
	Result *Profile `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *UpdateProfileResponse) Reset()                    { *m = UpdateProfileResponse{} }
func (m *UpdateProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateProfileResponse) ProtoMessage()               {}
func (*UpdateProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UpdateProfileResponse) GetResult() *Profile {
	if m != nil {
		return m.Result
	}
	return nil
}

type DeleteProfileRequest struct {
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteProfileRequest) Reset()                    { *m = DeleteProfileRequest{} }
func (m *DeleteProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteProfileRequest) ProtoMessage()               {}
func (*DeleteProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DeleteProfileRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

type ListProfilesResponse struct {
	Results []*Profile `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *ListProfilesResponse) Reset()                    { *m = ListProfilesResponse{} }
func (m *ListProfilesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListProfilesResponse) ProtoMessage()               {}
func (*ListProfilesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ListProfilesResponse) GetResults() []*Profile {
	if m != nil {
		return m.Results
	}
	return nil
}

type Group struct {
	Id        *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name      string                `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Notes     string                `protobuf:"bytes,3,opt,name=notes" json:"notes,omitempty"`
	Profile   *Profile              `protobuf:"bytes,4,opt,name=profile" json:"profile,omitempty"`
	ProfileId *atlas_rpc.Identifier `protobuf:"bytes,5,opt,name=profile_id,json=profileId" json:"profile_id,omitempty"`
	Contacts  []*Contact            `protobuf:"bytes,6,rep,name=contacts" json:"contacts,omitempty"`
}

func (m *Group) Reset()                    { *m = Group{} }
func (m *Group) String() string            { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()               {}
func (*Group) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Group) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Group) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Group) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *Group) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

func (m *Group) GetProfileId() *atlas_rpc.Identifier {
	if m != nil {
		return m.ProfileId
	}
	return nil
}

func (m *Group) GetContacts() []*Contact {
	if m != nil {
		return m.Contacts
	}
	return nil
}

type CreateGroupRequest struct {
	Payload *Group `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *CreateGroupRequest) Reset()                    { *m = CreateGroupRequest{} }
func (m *CreateGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateGroupRequest) ProtoMessage()               {}
func (*CreateGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CreateGroupRequest) GetPayload() *Group {
	if m != nil {
		return m.Payload
	}
	return nil
}

type CreateGroupResponse struct {
	Result *Group `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *CreateGroupResponse) Reset()                    { *m = CreateGroupResponse{} }
func (m *CreateGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateGroupResponse) ProtoMessage()               {}
func (*CreateGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CreateGroupResponse) GetResult() *Group {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReadGroupRequest struct {
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ReadGroupRequest) Reset()                    { *m = ReadGroupRequest{} }
func (m *ReadGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadGroupRequest) ProtoMessage()               {}
func (*ReadGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ReadGroupRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

type ReadGroupResponse struct {
	Result *Group `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *ReadGroupResponse) Reset()                    { *m = ReadGroupResponse{} }
func (m *ReadGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadGroupResponse) ProtoMessage()               {}
func (*ReadGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ReadGroupResponse) GetResult() *Group {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpdateGroupRequest struct {
	Payload *Group `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *UpdateGroupRequest) Reset()                    { *m = UpdateGroupRequest{} }
func (m *UpdateGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateGroupRequest) ProtoMessage()               {}
func (*UpdateGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *UpdateGroupRequest) GetPayload() *Group {
	if m != nil {
		return m.Payload
	}
	return nil
}

type UpdateGroupResponse struct {
	Result *Group `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *UpdateGroupResponse) Reset()                    { *m = UpdateGroupResponse{} }
func (m *UpdateGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateGroupResponse) ProtoMessage()               {}
func (*UpdateGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *UpdateGroupResponse) GetResult() *Group {
	if m != nil {
		return m.Result
	}
	return nil
}

type DeleteGroupRequest struct {
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteGroupRequest) Reset()                    { *m = DeleteGroupRequest{} }
func (m *DeleteGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteGroupRequest) ProtoMessage()               {}
func (*DeleteGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *DeleteGroupRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

type ListGroupsResponse struct {
	Results []*Group `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *ListGroupsResponse) Reset()                    { *m = ListGroupsResponse{} }
func (m *ListGroupsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListGroupsResponse) ProtoMessage()               {}
func (*ListGroupsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ListGroupsResponse) GetResults() []*Group {
	if m != nil {
		return m.Results
	}
	return nil
}

type Contact struct {
	Id           *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	FirstName    string                `protobuf:"bytes,2,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	MiddleName   string                `protobuf:"bytes,3,opt,name=middle_name,json=middleName" json:"middle_name,omitempty"`
	LastName     string                `protobuf:"bytes,4,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	PrimaryEmail string                `protobuf:"bytes,6,opt,name=primary_email,json=primaryEmail" json:"primary_email,omitempty"`
	Notes        string                `protobuf:"bytes,7,opt,name=notes" json:"notes,omitempty"`
	Emails       []*Email              `protobuf:"bytes,8,rep,name=emails" json:"emails,omitempty"`
	HomeAddress  *Address              `protobuf:"bytes,9,opt,name=home_address,json=homeAddress" json:"home_address,omitempty"`
	WorkAddress  *Address              `protobuf:"bytes,10,opt,name=work_address,json=workAddress" json:"work_address,omitempty"`
	ProfileId    *atlas_rpc.Identifier `protobuf:"bytes,11,opt,name=profile_id,json=profileId" json:"profile_id,omitempty"`
	Profile      *Profile              `protobuf:"bytes,12,opt,name=profile" json:"profile,omitempty"`
	Groups       []*Group              `protobuf:"bytes,13,rep,name=groups" json:"groups,omitempty"`
	// nicknames is arbitrary json, but should be used for a list of strings
	Nicknames *gorm_types.JSONValue `protobuf:"bytes,14,opt,name=nicknames" json:"nicknames,omitempty"`
}

func (m *Contact) Reset()                    { *m = Contact{} }
func (m *Contact) String() string            { return proto.CompactTextString(m) }
func (*Contact) ProtoMessage()               {}
func (*Contact) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Contact) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Contact) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Contact) GetMiddleName() string {
	if m != nil {
		return m.MiddleName
	}
	return ""
}

func (m *Contact) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Contact) GetPrimaryEmail() string {
	if m != nil {
		return m.PrimaryEmail
	}
	return ""
}

func (m *Contact) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *Contact) GetEmails() []*Email {
	if m != nil {
		return m.Emails
	}
	return nil
}

func (m *Contact) GetHomeAddress() *Address {
	if m != nil {
		return m.HomeAddress
	}
	return nil
}

func (m *Contact) GetWorkAddress() *Address {
	if m != nil {
		return m.WorkAddress
	}
	return nil
}

func (m *Contact) GetProfileId() *atlas_rpc.Identifier {
	if m != nil {
		return m.ProfileId
	}
	return nil
}

func (m *Contact) GetProfile() *Profile {
	if m != nil {
		return m.Profile
	}
	return nil
}

func (m *Contact) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *Contact) GetNicknames() *gorm_types.JSONValue {
	if m != nil {
		return m.Nicknames
	}
	return nil
}

type Email struct {
	Id      uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
}

func (m *Email) Reset()                    { *m = Email{} }
func (m *Email) String() string            { return proto.CompactTextString(m) }
func (*Email) ProtoMessage()               {}
func (*Email) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Email) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Email) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type Address struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	City    string `protobuf:"bytes,2,opt,name=city" json:"city,omitempty"`
	State   string `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
	Zip     string `protobuf:"bytes,4,opt,name=zip" json:"zip,omitempty"`
	Country string `protobuf:"bytes,5,opt,name=country" json:"country,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *Address) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Address) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Address) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Address) GetZip() string {
	if m != nil {
		return m.Zip
	}
	return ""
}

func (m *Address) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

type CreateContactRequest struct {
	Payload *Contact `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *CreateContactRequest) Reset()                    { *m = CreateContactRequest{} }
func (m *CreateContactRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateContactRequest) ProtoMessage()               {}
func (*CreateContactRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *CreateContactRequest) GetPayload() *Contact {
	if m != nil {
		return m.Payload
	}
	return nil
}

type CreateContactResponse struct {
	Result *Contact `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *CreateContactResponse) Reset()                    { *m = CreateContactResponse{} }
func (m *CreateContactResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateContactResponse) ProtoMessage()               {}
func (*CreateContactResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *CreateContactResponse) GetResult() *Contact {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReadContactRequest struct {
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ReadContactRequest) Reset()                    { *m = ReadContactRequest{} }
func (m *ReadContactRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadContactRequest) ProtoMessage()               {}
func (*ReadContactRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *ReadContactRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

type ReadContactResponse struct {
	Result *Contact `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *ReadContactResponse) Reset()                    { *m = ReadContactResponse{} }
func (m *ReadContactResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadContactResponse) ProtoMessage()               {}
func (*ReadContactResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *ReadContactResponse) GetResult() *Contact {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpdateContactRequest struct {
	Payload *Contact `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *UpdateContactRequest) Reset()                    { *m = UpdateContactRequest{} }
func (m *UpdateContactRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateContactRequest) ProtoMessage()               {}
func (*UpdateContactRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *UpdateContactRequest) GetPayload() *Contact {
	if m != nil {
		return m.Payload
	}
	return nil
}

type UpdateContactResponse struct {
	Result *Contact `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *UpdateContactResponse) Reset()                    { *m = UpdateContactResponse{} }
func (m *UpdateContactResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateContactResponse) ProtoMessage()               {}
func (*UpdateContactResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *UpdateContactResponse) GetResult() *Contact {
	if m != nil {
		return m.Result
	}
	return nil
}

type PatchContactRequest struct {
	Payload    *Contact                    `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
	UpdateMask *google_protobuf1.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask" json:"update_mask,omitempty"`
}

func (m *PatchContactRequest) Reset()                    { *m = PatchContactRequest{} }
func (m *PatchContactRequest) String() string            { return proto.CompactTextString(m) }
func (*PatchContactRequest) ProtoMessage()               {}
func (*PatchContactRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *PatchContactRequest) GetPayload() *Contact {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *PatchContactRequest) GetUpdateMask() *google_protobuf1.FieldMask {
	if m != nil {
		return m.UpdateMask
	}
	return nil
}

type PatchContactResponse struct {
	Result *Contact `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *PatchContactResponse) Reset()                    { *m = PatchContactResponse{} }
func (m *PatchContactResponse) String() string            { return proto.CompactTextString(m) }
func (*PatchContactResponse) ProtoMessage()               {}
func (*PatchContactResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *PatchContactResponse) GetResult() *Contact {
	if m != nil {
		return m.Result
	}
	return nil
}

type DeleteContactRequest struct {
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteContactRequest) Reset()                    { *m = DeleteContactRequest{} }
func (m *DeleteContactRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteContactRequest) ProtoMessage()               {}
func (*DeleteContactRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *DeleteContactRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

type ListContactsResponse struct {
	Results []*Contact `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
}

func (m *ListContactsResponse) Reset()                    { *m = ListContactsResponse{} }
func (m *ListContactsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListContactsResponse) ProtoMessage()               {}
func (*ListContactsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *ListContactsResponse) GetResults() []*Contact {
	if m != nil {
		return m.Results
	}
	return nil
}

type SMSRequest struct {
	Id      uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *SMSRequest) Reset()                    { *m = SMSRequest{} }
func (m *SMSRequest) String() string            { return proto.CompactTextString(m) }
func (*SMSRequest) ProtoMessage()               {}
func (*SMSRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *SMSRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SMSRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Profile)(nil), "api.contacts.Profile")
	proto.RegisterType((*CreateProfileRequest)(nil), "api.contacts.CreateProfileRequest")
	proto.RegisterType((*CreateProfileResponse)(nil), "api.contacts.CreateProfileResponse")
	proto.RegisterType((*ReadProfileRequest)(nil), "api.contacts.ReadProfileRequest")
	proto.RegisterType((*ReadProfileResponse)(nil), "api.contacts.ReadProfileResponse")
	proto.RegisterType((*UpdateProfileRequest)(nil), "api.contacts.UpdateProfileRequest")
	proto.RegisterType((*UpdateProfileResponse)(nil), "api.contacts.UpdateProfileResponse")
	proto.RegisterType((*DeleteProfileRequest)(nil), "api.contacts.DeleteProfileRequest")
	proto.RegisterType((*ListProfilesResponse)(nil), "api.contacts.ListProfilesResponse")
	proto.RegisterType((*Group)(nil), "api.contacts.Group")
	proto.RegisterType((*CreateGroupRequest)(nil), "api.contacts.CreateGroupRequest")
	proto.RegisterType((*CreateGroupResponse)(nil), "api.contacts.CreateGroupResponse")
	proto.RegisterType((*ReadGroupRequest)(nil), "api.contacts.ReadGroupRequest")
	proto.RegisterType((*ReadGroupResponse)(nil), "api.contacts.ReadGroupResponse")
	proto.RegisterType((*UpdateGroupRequest)(nil), "api.contacts.UpdateGroupRequest")
	proto.RegisterType((*UpdateGroupResponse)(nil), "api.contacts.UpdateGroupResponse")
	proto.RegisterType((*DeleteGroupRequest)(nil), "api.contacts.DeleteGroupRequest")
	proto.RegisterType((*ListGroupsResponse)(nil), "api.contacts.ListGroupsResponse")
	proto.RegisterType((*Contact)(nil), "api.contacts.Contact")
	proto.RegisterType((*Email)(nil), "api.contacts.Email")
	proto.RegisterType((*Address)(nil), "api.contacts.Address")
	proto.RegisterType((*CreateContactRequest)(nil), "api.contacts.CreateContactRequest")
	proto.RegisterType((*CreateContactResponse)(nil), "api.contacts.CreateContactResponse")
	proto.RegisterType((*ReadContactRequest)(nil), "api.contacts.ReadContactRequest")
	proto.RegisterType((*ReadContactResponse)(nil), "api.contacts.ReadContactResponse")
	proto.RegisterType((*UpdateContactRequest)(nil), "api.contacts.UpdateContactRequest")
	proto.RegisterType((*UpdateContactResponse)(nil), "api.contacts.UpdateContactResponse")
	proto.RegisterType((*PatchContactRequest)(nil), "api.contacts.PatchContactRequest")
	proto.RegisterType((*PatchContactResponse)(nil), "api.contacts.PatchContactResponse")
	proto.RegisterType((*DeleteContactRequest)(nil), "api.contacts.DeleteContactRequest")
	proto.RegisterType((*ListContactsResponse)(nil), "api.contacts.ListContactsResponse")
	proto.RegisterType((*SMSRequest)(nil), "api.contacts.SMSRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Profiles service

type ProfilesClient interface {
	Create(ctx context.Context, in *CreateProfileRequest, opts ...grpc.CallOption) (*CreateProfileResponse, error)
	Read(ctx context.Context, in *ReadProfileRequest, opts ...grpc.CallOption) (*ReadProfileResponse, error)
	Update(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error)
	Delete(ctx context.Context, in *DeleteProfileRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	List(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ListProfilesResponse, error)
}

type profilesClient struct {
	cc *grpc.ClientConn
}

func NewProfilesClient(cc *grpc.ClientConn) ProfilesClient {
	return &profilesClient{cc}
}

func (c *profilesClient) Create(ctx context.Context, in *CreateProfileRequest, opts ...grpc.CallOption) (*CreateProfileResponse, error) {
	out := new(CreateProfileResponse)
	err := grpc.Invoke(ctx, "/api.contacts.Profiles/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesClient) Read(ctx context.Context, in *ReadProfileRequest, opts ...grpc.CallOption) (*ReadProfileResponse, error) {
	out := new(ReadProfileResponse)
	err := grpc.Invoke(ctx, "/api.contacts.Profiles/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesClient) Update(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error) {
	out := new(UpdateProfileResponse)
	err := grpc.Invoke(ctx, "/api.contacts.Profiles/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesClient) Delete(ctx context.Context, in *DeleteProfileRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/api.contacts.Profiles/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesClient) List(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ListProfilesResponse, error) {
	out := new(ListProfilesResponse)
	err := grpc.Invoke(ctx, "/api.contacts.Profiles/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Profiles service

type ProfilesServer interface {
	Create(context.Context, *CreateProfileRequest) (*CreateProfileResponse, error)
	Read(context.Context, *ReadProfileRequest) (*ReadProfileResponse, error)
	Update(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error)
	Delete(context.Context, *DeleteProfileRequest) (*google_protobuf.Empty, error)
	List(context.Context, *google_protobuf.Empty) (*ListProfilesResponse, error)
}

func RegisterProfilesServer(s *grpc.Server, srv ProfilesServer) {
	s.RegisterService(&_Profiles_serviceDesc, srv)
}

func _Profiles_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Profiles/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).Create(ctx, req.(*CreateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiles_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Profiles/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).Read(ctx, req.(*ReadProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiles_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Profiles/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).Update(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiles_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Profiles/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).Delete(ctx, req.(*DeleteProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiles_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Profiles/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).List(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Profiles_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.contacts.Profiles",
	HandlerType: (*ProfilesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Profiles_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Profiles_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Profiles_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Profiles_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Profiles_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/contacts.proto",
}

// Client API for Groups service

type GroupsClient interface {
	Create(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error)
	Read(ctx context.Context, in *ReadGroupRequest, opts ...grpc.CallOption) (*ReadGroupResponse, error)
	Update(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*UpdateGroupResponse, error)
	Delete(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	List(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ListGroupsResponse, error)
}

type groupsClient struct {
	cc *grpc.ClientConn
}

func NewGroupsClient(cc *grpc.ClientConn) GroupsClient {
	return &groupsClient{cc}
}

func (c *groupsClient) Create(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error) {
	out := new(CreateGroupResponse)
	err := grpc.Invoke(ctx, "/api.contacts.Groups/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) Read(ctx context.Context, in *ReadGroupRequest, opts ...grpc.CallOption) (*ReadGroupResponse, error) {
	out := new(ReadGroupResponse)
	err := grpc.Invoke(ctx, "/api.contacts.Groups/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) Update(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*UpdateGroupResponse, error) {
	out := new(UpdateGroupResponse)
	err := grpc.Invoke(ctx, "/api.contacts.Groups/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) Delete(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/api.contacts.Groups/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) List(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ListGroupsResponse, error) {
	out := new(ListGroupsResponse)
	err := grpc.Invoke(ctx, "/api.contacts.Groups/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Groups service

type GroupsServer interface {
	Create(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error)
	Read(context.Context, *ReadGroupRequest) (*ReadGroupResponse, error)
	Update(context.Context, *UpdateGroupRequest) (*UpdateGroupResponse, error)
	Delete(context.Context, *DeleteGroupRequest) (*google_protobuf.Empty, error)
	List(context.Context, *google_protobuf.Empty) (*ListGroupsResponse, error)
}

func RegisterGroupsServer(s *grpc.Server, srv GroupsServer) {
	s.RegisterService(&_Groups_serviceDesc, srv)
}

func _Groups_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Groups/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).Create(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Groups/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).Read(ctx, req.(*ReadGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Groups/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).Update(ctx, req.(*UpdateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Groups/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).Delete(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Groups/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).List(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Groups_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.contacts.Groups",
	HandlerType: (*GroupsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Groups_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Groups_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Groups_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Groups_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Groups_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/contacts.proto",
}

// Client API for Contacts service

type ContactsClient interface {
	Create(ctx context.Context, in *CreateContactRequest, opts ...grpc.CallOption) (*CreateContactResponse, error)
	Read(ctx context.Context, in *ReadContactRequest, opts ...grpc.CallOption) (*ReadContactResponse, error)
	Update(ctx context.Context, in *UpdateContactRequest, opts ...grpc.CallOption) (*UpdateContactResponse, error)
	Patch(ctx context.Context, in *PatchContactRequest, opts ...grpc.CallOption) (*PatchContactResponse, error)
	Delete(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	List(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ListContactsResponse, error)
	SendSMS(ctx context.Context, in *SMSRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type contactsClient struct {
	cc *grpc.ClientConn
}

func NewContactsClient(cc *grpc.ClientConn) ContactsClient {
	return &contactsClient{cc}
}

func (c *contactsClient) Create(ctx context.Context, in *CreateContactRequest, opts ...grpc.CallOption) (*CreateContactResponse, error) {
	out := new(CreateContactResponse)
	err := grpc.Invoke(ctx, "/api.contacts.Contacts/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsClient) Read(ctx context.Context, in *ReadContactRequest, opts ...grpc.CallOption) (*ReadContactResponse, error) {
	out := new(ReadContactResponse)
	err := grpc.Invoke(ctx, "/api.contacts.Contacts/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsClient) Update(ctx context.Context, in *UpdateContactRequest, opts ...grpc.CallOption) (*UpdateContactResponse, error) {
	out := new(UpdateContactResponse)
	err := grpc.Invoke(ctx, "/api.contacts.Contacts/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsClient) Patch(ctx context.Context, in *PatchContactRequest, opts ...grpc.CallOption) (*PatchContactResponse, error) {
	out := new(PatchContactResponse)
	err := grpc.Invoke(ctx, "/api.contacts.Contacts/Patch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsClient) Delete(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/api.contacts.Contacts/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsClient) List(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*ListContactsResponse, error) {
	out := new(ListContactsResponse)
	err := grpc.Invoke(ctx, "/api.contacts.Contacts/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsClient) SendSMS(ctx context.Context, in *SMSRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/api.contacts.Contacts/SendSMS", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Contacts service

type ContactsServer interface {
	Create(context.Context, *CreateContactRequest) (*CreateContactResponse, error)
	Read(context.Context, *ReadContactRequest) (*ReadContactResponse, error)
	Update(context.Context, *UpdateContactRequest) (*UpdateContactResponse, error)
	Patch(context.Context, *PatchContactRequest) (*PatchContactResponse, error)
	Delete(context.Context, *DeleteContactRequest) (*google_protobuf.Empty, error)
	List(context.Context, *google_protobuf.Empty) (*ListContactsResponse, error)
	SendSMS(context.Context, *SMSRequest) (*google_protobuf.Empty, error)
}

func RegisterContactsServer(s *grpc.Server, srv ContactsServer) {
	s.RegisterService(&_Contacts_serviceDesc, srv)
}

func _Contacts_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Contacts/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).Create(ctx, req.(*CreateContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contacts_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Contacts/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).Read(ctx, req.(*ReadContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contacts_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Contacts/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).Update(ctx, req.(*UpdateContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contacts_Patch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).Patch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Contacts/Patch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).Patch(ctx, req.(*PatchContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contacts_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Contacts/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).Delete(ctx, req.(*DeleteContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contacts_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Contacts/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).List(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contacts_SendSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).SendSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Contacts/SendSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).SendSMS(ctx, req.(*SMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Contacts_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.contacts.Contacts",
	HandlerType: (*ContactsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Contacts_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Contacts_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Contacts_Update_Handler,
		},
		{
			MethodName: "Patch",
			Handler:    _Contacts_Patch_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Contacts_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Contacts_List_Handler,
		},
		{
			MethodName: "SendSMS",
			Handler:    _Contacts_SendSMS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/contacts.proto",
}

func init() { proto.RegisterFile("pkg/pb/contacts.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1624 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xdd, 0x6e, 0xdb, 0xc6,
	0x12, 0x0e, 0x65, 0x59, 0x3f, 0x63, 0xc7, 0x71, 0xd6, 0x4e, 0x42, 0x2b, 0xc9, 0x89, 0xc2, 0x83,
	0x03, 0x04, 0xf6, 0x91, 0x98, 0x28, 0x39, 0x3f, 0xb1, 0x51, 0x20, 0x91, 0xe3, 0x18, 0x09, 0x9a,
	0x34, 0x95, 0x91, 0x5e, 0x04, 0x28, 0xd4, 0x95, 0xb8, 0x96, 0x19, 0x53, 0x5c, 0x96, 0x4b, 0x35,
	0x75, 0x8b, 0x00, 0x45, 0x03, 0xf4, 0x01, 0xda, 0x9b, 0x5e, 0xf4, 0x0d, 0xfa, 0x04, 0xd6, 0x55,
	0x6f, 0x7b, 0xdb, 0xf6, 0x11, 0x7a, 0xd3, 0x87, 0x28, 0x50, 0x70, 0x7f, 0x28, 0x8a, 0xa2, 0x64,
	0x59, 0x49, 0x6f, 0x04, 0x92, 0x3b, 0x33, 0xdf, 0xcc, 0xec, 0x37, 0xb3, 0xb3, 0x82, 0x0b, 0xde,
	0x61, 0xc7, 0xf4, 0x5a, 0x66, 0x9b, 0xba, 0x01, 0x6e, 0x07, 0xac, 0xea, 0xf9, 0x34, 0xa0, 0x68,
	0x11, 0x7b, 0x76, 0x55, 0x7d, 0x2b, 0x5d, 0xee, 0x50, 0xda, 0x71, 0x88, 0xc9, 0xd7, 0x5a, 0xbd,
	0x7d, 0x93, 0x74, 0xbd, 0xe0, 0x48, 0x88, 0x96, 0xca, 0xc9, 0xc5, 0x7d, 0x9b, 0x38, 0x56, 0xb3,
	0x8b, 0xd9, 0xa1, 0x94, 0xb8, 0x22, 0x25, 0xb0, 0x67, 0x9b, 0xd8, 0x75, 0x69, 0x80, 0x03, 0x9b,
	0xba, 0x12, 0xaa, 0xb4, 0xd5, 0xb1, 0x83, 0x83, 0x5e, 0xab, 0xda, 0xa6, 0x5d, 0xd3, 0x39, 0xda,
	0x0f, 0x84, 0xa1, 0x76, 0xa5, 0x43, 0xdc, 0xca, 0x67, 0xd8, 0xb1, 0x2d, 0x1c, 0x10, 0x73, 0xe4,
	0x41, 0x2a, 0xff, 0x3b, 0x26, 0xcc, 0x5e, 0xe1, 0x4e, 0x87, 0xf8, 0x26, 0xf5, 0xb8, 0xf9, 0x14,
	0xa8, 0xcd, 0x18, 0x94, 0xed, 0xee, 0xd3, 0x96, 0x43, 0x3f, 0xa7, 0x1e, 0x71, 0xe3, 0x90, 0x1d,
	0xea, 0x77, 0x23, 0x13, 0xe1, 0x8b, 0xd4, 0xbd, 0x3b, 0xad, 0x6e, 0x70, 0xe4, 0x11, 0x26, 0x7e,
	0xa5, 0xea, 0xce, 0x38, 0x55, 0x1c, 0x38, 0x98, 0x55, 0xb0, 0xe7, 0x55, 0x02, 0x4a, 0x9d, 0x43,
	0x3b, 0x30, 0x7d, 0xaf, 0x6d, 0xfa, 0x84, 0xd1, 0x9e, 0xdf, 0x26, 0xd1, 0x83, 0x30, 0x63, 0xfc,
	0xa6, 0x41, 0xfe, 0x99, 0x4f, 0xf7, 0x6d, 0x87, 0xa0, 0xff, 0x40, 0xc6, 0xb6, 0x74, 0xad, 0xac,
	0xdd, 0x58, 0xa8, 0x5d, 0xa8, 0x72, 0x3b, 0x55, 0xdf, 0x6b, 0x57, 0x1f, 0x59, 0xc4, 0x0d, 0xec,
	0x7d, 0x9b, 0xf8, 0xf5, 0xa5, 0xfe, 0xf1, 0x1a, 0x40, 0x01, 0xe5, 0x18, 0xf1, 0x6d, 0xec, 0x34,
	0x32, 0xb6, 0x85, 0x10, 0x64, 0x5d, 0xdc, 0x25, 0x7a, 0xa6, 0xac, 0xdd, 0x28, 0x36, 0xf8, 0x33,
	0x5a, 0x85, 0x79, 0x97, 0x06, 0x84, 0xe9, 0x73, 0xfc, 0xa3, 0x78, 0x41, 0xb7, 0xa0, 0xa0, 0xb6,
	0x5f, 0xcf, 0x96, 0xe7, 0x04, 0x4c, 0x8c, 0x13, 0xd5, 0x6d, 0xf1, 0xd0, 0x88, 0xc4, 0xd0, 0x06,
	0xe4, 0x3a, 0x3e, 0xed, 0x79, 0x4c, 0x9f, 0xe7, 0x0a, 0x2b, 0xc3, 0x0a, 0xbb, 0xe1, 0x5a, 0x43,
	0x8a, 0x6c, 0x16, 0xfa, 0xc7, 0x6b, 0xd9, 0x82, 0x56, 0xd6, 0x8c, 0x5d, 0x58, 0xdd, 0xf6, 0x09,
	0x0e, 0x88, 0x8c, 0xad, 0x41, 0x3e, 0xed, 0x11, 0x16, 0x20, 0x13, 0xf2, 0x1e, 0x3e, 0x72, 0x28,
	0x8e, 0xc5, 0x19, 0xb7, 0xa7, 0xc4, 0x95, 0x94, 0xf1, 0x10, 0x2e, 0x24, 0x0c, 0x31, 0x8f, 0xba,
	0x8c, 0xa0, 0x0a, 0xe4, 0x7c, 0xc2, 0x7a, 0x4e, 0x30, 0xd9, 0x90, 0x14, 0x32, 0xb6, 0x00, 0x35,
	0x08, 0xb6, 0x12, 0xee, 0xfc, 0xeb, 0xc4, 0x8c, 0x87, 0x19, 0x36, 0x1e, 0xc0, 0xca, 0x90, 0xf2,
	0x6c, 0x2e, 0xec, 0xc2, 0xea, 0x73, 0xcf, 0x7a, 0x37, 0x39, 0x49, 0x18, 0x9a, 0xcd, 0xa1, 0xf7,
	0x60, 0xf5, 0x01, 0x71, 0xc8, 0x88, 0x43, 0x53, 0x66, 0x65, 0x17, 0x56, 0xdf, 0xb7, 0x59, 0x20,
	0x95, 0x59, 0xe4, 0x85, 0x09, 0x79, 0x01, 0xc0, 0x74, 0x2d, 0x8d, 0x64, 0x51, 0x3c, 0x52, 0xca,
	0xf8, 0x21, 0x03, 0xf3, 0x9c, 0x48, 0x7f, 0x7f, 0x05, 0xfc, 0x0f, 0xf2, 0x9e, 0x80, 0xd7, 0xb3,
	0x13, 0x52, 0x54, 0xcf, 0xf5, 0x8f, 0xd7, 0x32, 0xc6, 0x99, 0x86, 0x92, 0x46, 0x77, 0x00, 0xe4,
	0x63, 0xd3, 0xb6, 0xf4, 0xf9, 0x49, 0xb9, 0x29, 0x4a, 0xc1, 0x47, 0x16, 0xba, 0x1b, 0x2b, 0xb8,
	0xdc, 0x84, 0x82, 0x13, 0x78, 0xb5, 0x33, 0x83, 0xc2, 0x8b, 0xd5, 0xd2, 0x36, 0x20, 0x51, 0x02,
	0xa2, 0xd8, 0xe4, 0x26, 0x55, 0x92, 0xac, 0x49, 0xad, 0xcc, 0x88, 0x33, 0x75, 0x58, 0x19, 0x32,
	0x22, 0xf7, 0x6a, 0x23, 0xc1, 0x98, 0xf4, 0xf2, 0x96, 0x7c, 0xb9, 0x0b, 0xcb, 0x61, 0x19, 0x0c,
	0xb9, 0x31, 0x25, 0x57, 0xee, 0xc1, 0xf9, 0x98, 0xea, 0x2c, 0xe0, 0xdb, 0x80, 0x04, 0xe9, 0xdf,
	0x32, 0x0b, 0x43, 0x46, 0x66, 0x71, 0x64, 0x0b, 0x90, 0xa8, 0x9a, 0x59, 0xf2, 0xb0, 0x0d, 0x28,
	0xac, 0x19, 0xae, 0xca, 0x62, 0x75, 0x9b, 0xa8, 0x98, 0xf4, 0x28, 0x54, 0xbd, 0xfc, 0x99, 0x85,
	0xbc, 0x24, 0xce, 0xac, 0x15, 0x73, 0x15, 0x60, 0xdf, 0xf6, 0x59, 0xd0, 0x8c, 0xd5, 0x4d, 0x91,
	0x7f, 0x79, 0x1a, 0x16, 0xcf, 0x35, 0x58, 0xe8, 0xda, 0x96, 0xe5, 0x10, 0xb1, 0x2e, 0x4a, 0x08,
	0xc4, 0x27, 0x2e, 0x70, 0x19, 0x8a, 0x0e, 0x56, 0xea, 0x59, 0xbe, 0x5c, 0x08, 0x3f, 0xf0, 0xc5,
	0x3b, 0x70, 0xd6, 0xf3, 0xed, 0x2e, 0xf6, 0x8f, 0x9a, 0xa4, 0x8b, 0x6d, 0x47, 0xcf, 0x85, 0x02,
	0xf5, 0x73, 0x21, 0xc7, 0x97, 0xb5, 0xfe, 0x1f, 0x3f, 0xcd, 0x65, 0xfd, 0xcc, 0x27, 0x5a, 0x63,
	0x51, 0x4a, 0xed, 0x84, 0x42, 0x83, 0x82, 0xcd, 0xc7, 0x0b, 0x76, 0x03, 0x72, 0xdc, 0x06, 0xd3,
	0x0b, 0x69, 0x99, 0xe1, 0xaa, 0x0d, 0x29, 0x82, 0xfe, 0x0f, 0x8b, 0x07, 0xb4, 0x4b, 0x9a, 0xd8,
	0xb2, 0x7c, 0xc2, 0x98, 0x5e, 0x4c, 0x2b, 0xf1, 0xfb, 0x62, 0xb1, 0xb1, 0x10, 0x8a, 0xca, 0x97,
	0x50, 0xf3, 0x15, 0xf5, 0x0f, 0x23, 0x4d, 0x98, 0xa8, 0x19, 0x8a, 0x2a, 0xcd, 0xe1, 0xc6, 0xb0,
	0x30, 0x65, 0x63, 0x88, 0xf5, 0xa1, 0xc5, 0x53, 0xf5, 0xa1, 0xed, 0xe8, 0x3c, 0x3e, 0x3b, 0x96,
	0x29, 0xf5, 0x8b, 0xfd, 0xe3, 0x35, 0x54, 0x5b, 0x86, 0x25, 0x2e, 0xda, 0x54, 0xab, 0xea, 0x9c,
	0x46, 0xb7, 0xa1, 0xe8, 0xda, 0xed, 0xc3, 0x70, 0xf3, 0x98, 0xbe, 0x24, 0xf1, 0xf9, 0x58, 0x24,
	0x26, 0x9c, 0xc7, 0x7b, 0x1f, 0x3c, 0xfd, 0x08, 0x3b, 0x3d, 0xd2, 0x18, 0xc8, 0xc5, 0x1a, 0x52,
	0x0b, 0xe6, 0xc5, 0x96, 0x2d, 0x45, 0xe4, 0xcb, 0x72, 0x56, 0x6d, 0x40, 0x5e, 0x25, 0x90, 0x53,
	0xaa, 0x7e, 0x3e, 0xd4, 0x81, 0xcc, 0xcd, 0xd8, 0xa6, 0x2b, 0x89, 0xcd, 0x2b, 0xfd, 0xe3, 0x35,
	0xbd, 0xa0, 0x85, 0xcd, 0xbb, 0x45, 0xa9, 0x83, 0xc0, 0x66, 0x4d, 0x49, 0x88, 0xb2, 0x66, 0xbc,
	0xd1, 0x20, 0xaf, 0x52, 0xac, 0x0f, 0xcc, 0x6a, 0x9c, 0x1b, 0xea, 0x35, 0xd4, 0x6d, 0xdb, 0xc1,
	0x91, 0x6a, 0xfc, 0xe1, 0x73, 0xc8, 0x23, 0x16, 0xe0, 0x40, 0xb1, 0x56, 0xbc, 0xa0, 0x65, 0x98,
	0xfb, 0xc2, 0xf6, 0x24, 0x55, 0xc3, 0xc7, 0xd0, 0x6a, 0x9b, 0xf6, 0xdc, 0xc0, 0x3f, 0xe2, 0xed,
	0xbc, 0xd8, 0x50, 0xaf, 0x69, 0x63, 0x8c, 0x1a, 0x8c, 0xa6, 0x3c, 0xb2, 0x95, 0xf8, 0xe8, 0x18,
	0x13, 0x19, 0x9a, 0xee, 0xc8, 0x56, 0xe2, 0x89, 0x31, 0x26, 0xe1, 0xce, 0xe9, 0xc6, 0x98, 0xb7,
	0x74, 0x21, 0x1a, 0x63, 0xde, 0x41, 0x4e, 0x12, 0x86, 0x66, 0x73, 0xe8, 0x8d, 0x06, 0x2b, 0xcf,
	0x70, 0xd0, 0x3e, 0x78, 0x4b, 0x87, 0xd0, 0x16, 0x2c, 0xf4, 0xb8, 0x43, 0xfc, 0x9e, 0xc3, 0x49,
	0xb5, 0x50, 0x2b, 0x55, 0xc5, 0x45, 0xa7, 0xaa, 0xae, 0x42, 0xd5, 0x87, 0xe1, 0x55, 0xe8, 0x09,
	0x66, 0x87, 0x0d, 0x10, 0xe2, 0xe1, 0xb3, 0xb1, 0x03, 0xab, 0xc3, 0x4e, 0xcc, 0x16, 0x4c, 0x34,
	0x93, 0xcd, 0xb6, 0xc5, 0x72, 0x26, 0xdb, 0x56, 0x15, 0x3f, 0xed, 0x4c, 0x16, 0xe5, 0x42, 0x9d,
	0x31, 0xff, 0x05, 0xd8, 0x7b, 0xb2, 0xa7, 0xd0, 0x93, 0x85, 0xae, 0x43, 0xbe, 0x4b, 0x18, 0xc3,
	0x1d, 0x75, 0x76, 0xa8, 0xd7, 0xda, 0xcf, 0x59, 0x28, 0xa8, 0x89, 0x10, 0x75, 0x21, 0x27, 0x58,
	0x8f, 0x8c, 0x04, 0x5c, 0xca, 0xdd, 0xa0, 0xf4, 0xcf, 0x89, 0x32, 0x22, 0x10, 0xa3, 0xf4, 0xf5,
	0xaf, 0xbf, 0x7f, 0x97, 0x59, 0x35, 0x8a, 0xa6, 0xec, 0x88, 0x6c, 0x33, 0xda, 0x3f, 0x0a, 0xd9,
	0x90, 0xdf, 0xa8, 0x3c, 0x6c, 0x68, 0x74, 0xee, 0x2f, 0x5d, 0x9f, 0x20, 0x21, 0x81, 0x0c, 0x0e,
	0x74, 0x05, 0x95, 0x22, 0x20, 0xf3, 0x4b, 0xdb, 0xaa, 0xaa, 0xeb, 0x5b, 0xd3, 0xb6, 0x5e, 0xa3,
	0x6f, 0x34, 0xc8, 0x09, 0x0a, 0x27, 0x03, 0x4c, 0x1b, 0xf4, 0x93, 0x01, 0xa6, 0xce, 0xf0, 0xc6,
	0x6d, 0x8e, 0x5b, 0x29, 0x19, 0x31, 0x5c, 0x19, 0x60, 0x35, 0x81, 0x3f, 0x88, 0xbc, 0x07, 0x39,
	0xc1, 0x9a, 0xa4, 0x1f, 0x69, 0xf3, 0x7d, 0xe9, 0xe2, 0x08, 0xa5, 0x77, 0xc2, 0xab, 0xbf, 0x61,
	0xf6, 0x8f, 0xd7, 0x8a, 0xd1, 0x75, 0x54, 0xc4, 0xbf, 0x3e, 0x29, 0xfe, 0xe7, 0x90, 0x0d, 0xd9,
	0x86, 0xc6, 0x18, 0x2c, 0x25, 0x9c, 0x49, 0xbb, 0x2d, 0x18, 0xe7, 0x39, 0xce, 0x02, 0x1a, 0x6c,
	0x68, 0x89, 0x1f, 0x7a, 0x05, 0xad, 0xf6, 0x63, 0x16, 0x72, 0x62, 0x52, 0x42, 0x9d, 0x88, 0x49,
	0xe5, 0x34, 0x96, 0xc4, 0x47, 0xb1, 0xe4, 0xe6, 0xa6, 0x8c, 0xbd, 0x86, 0xce, 0x41, 0x91, 0x91,
	0x37, 0xe5, 0xcd, 0x35, 0xca, 0xa4, 0x2d, 0x39, 0xf4, 0x8f, 0x51, 0x86, 0x0c, 0x81, 0x5c, 0x1b,
	0xbb, 0x2e, 0x21, 0xca, 0x1c, 0xa2, 0x84, 0x74, 0x09, 0x31, 0x9a, 0xbd, 0xaf, 0x06, 0xec, 0x29,
	0xa7, 0x31, 0x63, 0x52, 0x50, 0x29, 0x53, 0xac, 0x71, 0x8b, 0x23, 0x6e, 0x94, 0xca, 0x11, 0xe2,
	0x89, 0xbc, 0xa1, 0x11, 0x6f, 0xca, 0x69, 0xbc, 0x19, 0xf2, 0x60, 0x1c, 0x6b, 0x36, 0xfa, 0xc7,
	0x6b, 0x79, 0x79, 0x81, 0x13, 0x31, 0xaf, 0x8f, 0x8f, 0xf9, 0xc3, 0x13, 0x18, 0x53, 0x1e, 0x65,
	0xcc, 0xf0, 0xac, 0x6c, 0x9c, 0xe3, 0x18, 0x45, 0xa4, 0xb6, 0x6e, 0xc0, 0x96, 0x1c, 0x14, 0x54,
	0xdf, 0x3b, 0xa9, 0xf3, 0x0c, 0x37, 0xd7, 0xf4, 0xce, 0x93, 0x68, 0xe4, 0xb1, 0xce, 0x13, 0xdd,
	0xd1, 0xa6, 0xe9, 0x3c, 0x09, 0xa8, 0xeb, 0x13, 0x24, 0x46, 0x3a, 0x8f, 0x12, 0x3b, 0x7d, 0xe7,
	0x99, 0x1c, 0x60, 0xea, 0xb1, 0x1b, 0xeb, 0x3c, 0x03, 0xdc, 0x13, 0x19, 0xf4, 0x46, 0x83, 0x79,
	0x7e, 0xee, 0xa1, 0x44, 0x64, 0x29, 0x27, 0x72, 0xb2, 0x1f, 0xa4, 0x9d, 0x97, 0xca, 0x8b, 0xda,
	0xa9, 0xbc, 0x38, 0xa1, 0xff, 0x25, 0xdc, 0x38, 0xa1, 0xff, 0x49, 0xe9, 0xa8, 0xff, 0x8d, 0xdf,
	0x85, 0x19, 0xfa, 0x5f, 0xf2, 0x64, 0x8e, 0xf5, 0xbf, 0xe8, 0x3f, 0xb7, 0x17, 0x90, 0xdf, 0x23,
	0xae, 0xb5, 0xf7, 0x64, 0x0f, 0xe9, 0xc3, 0x16, 0x06, 0x47, 0xf2, 0xd8, 0x20, 0xae, 0x72, 0x7b,
	0x97, 0x0c, 0x34, 0xe4, 0xf7, 0x6b, 0x93, 0x75, 0xd9, 0xa6, 0xb6, 0xae, 0xaa, 0xa5, 0xfe, 0x8b,
	0xf6, 0xed, 0xfd, 0xef, 0x35, 0xe4, 0x0e, 0x6a, 0xc6, 0xf8, 0x18, 0x96, 0x1e, 0xd3, 0x03, 0xb7,
	0x5c, 0x27, 0x0e, 0xee, 0x62, 0xdf, 0x6e, 0xa3, 0xda, 0x41, 0x10, 0x78, 0x6c, 0xd3, 0x34, 0x27,
	0xff, 0xd7, 0xa9, 0x80, 0x2a, 0xd8, 0xf3, 0x4a, 0x97, 0x5e, 0xb6, 0x94, 0xfe, 0x3d, 0x25, 0x1b,
	0x2a, 0xd6, 0xe6, 0x6e, 0x55, 0x6f, 0xae, 0x67, 0xb4, 0x4c, 0x6d, 0x19, 0x7b, 0x9e, 0x63, 0xb7,
	0xf9, 0x9f, 0xb8, 0xe6, 0x4b, 0x46, 0xdd, 0xcd, 0x91, 0x2f, 0x2f, 0xee, 0x4c, 0x8f, 0x68, 0x8a,
	0x3f, 0xbb, 0xb7, 0xbc, 0x56, 0x2b, 0xc7, 0x73, 0x71, 0xfb, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xbd, 0x24, 0x45, 0x1e, 0x00, 0x17, 0x00, 0x00,
}
